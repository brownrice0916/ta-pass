generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SerialNumber {
  id         String    @id @default(cuid())
  code       String    @unique
  isUsed     Boolean   @default(false)
  usedAt     DateTime?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  activatedUntil DateTime? // 👈 이거 추가해줘!
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  
  type       String    @default("standard")
  metadata   Json?
  
  @@index([code])
  @@index([userId])
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String
  name           String
  image          String         @default("")
  country        String         @default("")
  gender         String         @default("")
  birthYear      String         @default("")
  birthMonth     String         @default("")
  birthDay       String         @default("")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviews        Review[]
  serialNumbers  SerialNumber[]
  membershipType String         @default("free")
  bookmarks      Bookmark[]     // 추가: 북마크 관계
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Restaurant {
  id                     String     @id @default(cuid())
  name                   String
  description            String     @default("")
  about                  String     @default("")
  address                String
  latitude               Float
  longitude              Float
  category               String?
  subCategory            String?
  rating                 Float?     @default(0)
  specialOfferText       String     @default("")
  images                 String[]   @default([])
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  addressDetail          String     @default("")
  languages              String[]   @default([])
  region1                String?    @default("")
  region2                String?    @default("")
  region3                String?    @default("")
  region4                String?
  socialLinks            Json?
  tags                   String[]   @default([])
  specialOfferType       String[]   @default([])
  specialOfferTextDetail String     @default("")
  reviews                Review[]
  bookmarks              Bookmark[] // 추가: 북마크 관계
}

model Review {
  id           String     @id @default(cuid())
  content      String?    // Changed from required to optional
  rating       Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       Int
  restaurantId String
  images       String[]
  tags         String[]   @default([])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

// 추가: 북마크 모델
model Bookmark {
  id           String     @id @default(cuid())
  userId       Int
  restaurantId String
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([userId, restaurantId]) // 한 사용자가 같은 식당을 중복 북마크하지 않도록
  @@index([userId])
  @@index([restaurantId])
}